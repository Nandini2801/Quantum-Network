#importing required libraries
import netsquid as ns
from netsquid.components import Channel, ClassicalChannel
from netsquid.components.qchannel import QuantumChannel
from netsquid.components.models.delaymodels import FixedDelayModel, GaussianDelayModel, FibreDelayModel
from netsquid.components.models.qerrormodels import FibreLossModel, DepolarNoiseModel, DephaseNoiseModel
from netsquid.components import QuantumMemory
from netsquid.qubits.qubitapi import create_qubits
import netsquid.qubits.operators as ops
from netsquid.components.component import Port
from netsquid.nodes import Node
from netsquid.nodes.connections import Connection
from netsquid.qubits import StateSampler
import netsquid.qubits.ketstates as ks
import numpy as np
import random
import matplotlib.pyplot as graph

#Creating qubits in |0>, |1>, 1.414(|0>+|1>), 1.414(|0>-|1>) states
def switcher(s):
    if s == 0:
        return ns.I
    if s == 1:
        return ns.X
    if s == 2:
        return ns.H
    if s == 3:
        return (ns.X - ns.Z)/np.sqrt(2)
#State of qubits sent by Alice
def referencer(s):
    if s == 0:
        return ns.s0
    if s == 1:
        return ns.s1
    if s == 2:
        return ns.h0
    if s == 3:
        return ns.h1

#Selecting Basis
def basis(t):
    if t == 0:
        return ns.Z
    if t == 1:
        return ns.X

print("Enter number of qubits to be transferred from Alice to Bob.")
N = int(input())
f = 5
fid = [0]*101
probability = [0]*101
probability[0] = 0
for t in range(1,101):
    probability[t] = t*0.01
for gam in np.arange(0, 1.01, 0.01):
    d_noise = DepolarNoiseModel(depolar_rate = gam, time_independent = True)
    x = [0]*(N+1)
    for i in range(N+1):
        x[i] = d_noise
    qloss_model = FibreLossModel(p_loss_init = 0.20, p_loss_length = 0.18)
    Qchannel_AB = QuantumChannel("Channel_Alice_to_Bob", length = 5, models = {'A' : qloss_model}, delay = 3)
    Cchannel_BA = ClassicalChannel("Classical_Channel_Bob_to_Alice", length = 5, delay = 10)
    #dephase_noise = DephaseNoiseModel(
    qmem_Alice = QuantumMemory(name = "mem_Alice", num_positions = N + 1)
    qmem_Bob = QuantumMemory(name = "mem_Bob", num_positions = N + 1)
    Qchannel_AB.ports['send'].connect(qmem_Alice.ports['qout0'])
    Qchannel_AB.ports['recv'].connect(qmem_Bob.ports['qin0'])
    Cchannel_BA.ports['send'].connect(qmem_Bob.ports['qout0'])
    Cchannel_BA.ports['recv'].connect(qmem_Alice.ports['qin0'])
    B_pointer = int(-1)
    Alice_polz = [0]*N
    Alice_bits = [0]*N
    Alice_state = [0]*N
    for j in range(N):
        q1, = create_qubits(1)
        s = random.choice([0,1,2,3])
        if s == 0:
            Alice_polz[j] = 'R'
            Alice_bits[j] = [0]
            Alice_state[j] = referencer(s)
        if s == 1:
            Alice_polz[j] = 'R'
            Alice_bits[j] = [1]
            Alice_state[j] = referencer(s)
        if s == 2:
            Alice_polz[j] = 'D'
            Alice_bits[j] = [0]
            Alice_state[j] = referencer(s)
        if s == 3:
            Alice_polz[j] = 'D'
            Alice_bits[j] = [1]
            Alice_state[j] = referencer(s)
        ns.qubits.operate(q1, switcher(s))
        #print("Alice sent ", q1, " at t = ", ns.sim_time())
        #print(q1[0].qstate.qrepr)
        ns.qubits.qubitapi.amplitude_dampen(q1,gamma = gam, prob = 1)
        Qchannel_AB.send(q1) 
        ns.sim_run()
        B_pointer = B_pointer + 1
        for u in range(B_pointer, -1, -1):
            qmem_Bob.put(qmem_Bob.peek(u, skip_noise = True), positions = [u+1])
            qmem_Bob.pop(positions = [u], skip_noise = True)
        #ns.sim_run(duration = (1/f))
        #Qchannel_AB.peek(index = 0)


    Nr = int(0)
    qb = [0]*N
    for m in  range(N):
        if qmem_Bob.peek(m+1, skip_noise = True) != [None]:
            qb[Nr] = qmem_Bob.peek(m+1, skip_noise = True)
            Nr = Nr + 1
    qbs = [0]*Nr
    for x in range(Nr):
        qbs[x] = qb[x]
    qbs.reverse()
    AQM = QuantumMemory("actual_bits_recd_by_Bob", num_positions = Nr)
    for p in range(Nr):
        AQM.put(qbs[p], positions = [p])

    Bob_bases = [0]*Nr
    Bob_bits = [0]*Nr
    Bob_polz = [0]*Nr

    mapper = [0]*Nr
    v = int(0)
    #print("What Bob has received : ")
    for k in range(N+1):
    #print(qmem_Bob.peek(k))
        if qmem_Bob.peek(N - k, skip_noise = True) != [None]:
            mapper[v] = k
            v = v + 1
    sum = 0
    for y in range(Nr):
        
        sum = sum + ns.qubits.fidelity(AQM.peek(y), Alice_state[mapper[y]])
    fid[int(100*gam)] = sum/Nr
        
#Creating Plots
graph.figure()
graph.semilogy(probability, fid, 'bo', markersize = 0.8)
graph.xlabel('Damping Factor')
graph.ylabel("Average Fidelity")
graph.savefig("Fidplot_damped.png")
